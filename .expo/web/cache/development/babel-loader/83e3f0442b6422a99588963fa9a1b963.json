{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive - University of Johannesburg\\\\Documents\\\\GitHub\\\\saoso\\\\App.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { Root } from \"native-base\";\nimport Setup from \"./src/boot/setup\";\nimport * as Font from \"expo-font\";\nimport { AppLoading } from \"expo\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      return _regeneratorRuntime.async(function componentWillMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                Roboto: require(\"native-base/Fonts/Roboto.ttf\"),\n                Roboto_medium: require(\"native-base/Fonts/Roboto_medium.ttf\")\n              }));\n\n            case 2:\n              this.setState({\n                loading: false\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.disableYellowBox = true;\n\n      if (this.state.loading) {\n        return React.createElement(Root, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 9\n          }\n        }, React.createElement(AppLoading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 11\n          }\n        }));\n      }\n\n      return React.createElement(Setup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/Users/Dell/OneDrive - University of Johannesburg/Documents/GitHub/saoso/App.js"],"names":["React","Root","Setup","Font","AppLoading","App","props","state","loading","loadAsync","Roboto","require","Roboto_medium","setState","console","disableYellowBox","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAOC,KAAP;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,UAAT,QAA2B,MAA3B;;IAEqBC,G;;;;;AACnB,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAb;AAFiB;AAGlB;;;;;;;;;;+CAGOL,IAAI,CAACM,SAAL,CAAe;AACnBC,gBAAAA,MAAM,EAAEC,OAAO,CAAC,8BAAD,CADI;AAEnBC,gBAAAA,aAAa,EAAED,OAAO,CAAC,qCAAD;AAFH,eAAf,C;;;AAIN,mBAAKE,QAAL,CAAc;AAAEL,gBAAAA,OAAO,EAAE;AAAX,eAAd;;;;;;;;;;;6BAEO;AACPM,MAAAA,OAAO,CAACC,gBAAR,GAA2B,IAA3B;;AACA,UAAI,KAAKR,KAAL,CAAWC,OAAf,EAAwB;AACtB,eACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAKD;;AACD,aAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EAvB8BR,KAAK,CAACgB,S;;SAAlBX,G","sourcesContent":["import React from \"react\";\r\nimport { Root } from \"native-base\";\r\nimport Setup from \"./src/boot/setup\";\r\nimport * as Font from \"expo-font\";\r\nimport { AppLoading } from \"expo\";\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { loading: true };\r\n  }\r\n\r\n  async componentWillMount() {\r\n    await Font.loadAsync({\r\n      Roboto: require(\"native-base/Fonts/Roboto.ttf\"),\r\n      Roboto_medium: require(\"native-base/Fonts/Roboto_medium.ttf\")\r\n    });\r\n    this.setState({ loading: false });\r\n  }\r\n  render() {\r\n    console.disableYellowBox = true;\r\n    if (this.state.loading) {\r\n      return (\r\n        <Root>\r\n          <AppLoading />\r\n        </Root>\r\n      );\r\n    }\r\n    return <Setup />;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
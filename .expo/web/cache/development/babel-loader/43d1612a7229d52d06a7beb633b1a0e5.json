{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelperLoose(o) { var i = 0; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } i = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return i.next.bind(i); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport NavigationActions from \"../NavigationActions\";\nimport StackActions from \"./StackActions\";\nimport createConfigGetter from \"./createConfigGetter\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport StateUtils from \"../StateUtils\";\nimport validateRouteConfigMap from \"./validateRouteConfigMap\";\nimport invariant from \"../utils/invariant\";\nimport { generateKey } from \"./KeyGenerator\";\nimport { createPathParser } from \"./pathUtils\";\n\nfunction behavesLikePushAction(action) {\n  return action.type === NavigationActions.NAVIGATE || action.type === StackActions.PUSH;\n}\n\nvar defaultActionCreators = function defaultActionCreators(route, navStateKey) {\n  return {};\n};\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (function (routeConfigs) {\n  var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  validateRouteConfigMap(routeConfigs);\n  var childRouters = {};\n  var routeNames = Object.keys(routeConfigs);\n  routeNames.forEach(function (routeName) {\n    var screen = getScreenForRouteName(routeConfigs, routeName);\n\n    if (screen && screen.router) {\n      childRouters[routeName] = screen.router;\n    } else {\n      childRouters[routeName] = null;\n    }\n  });\n  var initialRouteParams = stackConfig.initialRouteParams;\n  var getCustomActionCreators = stackConfig.getCustomActionCreators || defaultActionCreators;\n  var initialRouteName = stackConfig.initialRouteName || routeNames[0];\n  var initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    var route = {};\n    var childRouter = childRouters[action.routeName];\n\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      var childState = {};\n\n      if (childRouter !== null) {\n        var childAction = action.action || NavigationActions.init({\n          params: action.params\n        });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [_objectSpread(_objectSpread({\n          params: action.params\n        }, childState), {}, {\n          key: action.key || generateKey(),\n          routeName: action.routeName\n        })]\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(NavigationActions.navigate({\n        routeName: initialRouteName,\n        params: initialRouteParams\n      }));\n    }\n\n    var params = (route.params || action.params || initialRouteParams) && _objectSpread(_objectSpread(_objectSpread({}, route.params || {}), action.params || {}), initialRouteParams || {});\n\n    var initialRouteKey = stackConfig.initialRouteKey;\n    route = _objectSpread(_objectSpread(_objectSpread({}, route), params ? {\n      params: params\n    } : {}), {}, {\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || generateKey()\n    });\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route]\n    };\n  }\n\n  var _createPathParser = createPathParser(childRouters, routeConfigs, stackConfig),\n      getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,\n      _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;\n\n  return {\n    childRouters: childRouters,\n    getComponentForState: function getComponentForState(state) {\n      var activeChildRoute = state.routes[state.index];\n      var routeName = activeChildRoute.routeName;\n\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return _objectSpread(_objectSpread({}, getCustomActionCreators(route, navStateKey)), {}, {\n        pop: function pop(n, params) {\n          return StackActions.pop(_objectSpread({\n            n: n\n          }, params));\n        },\n        popToTop: function popToTop(params) {\n          return StackActions.popToTop(params);\n        },\n        push: function push(routeName, params, action) {\n          return StackActions.push({\n            routeName: routeName,\n            params: params,\n            action: action\n          });\n        },\n        replace: function replace(replaceWith, params, action, newKey) {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params: params,\n              action: action,\n              key: route.key,\n              newKey: newKey\n            });\n          }\n\n          invariant(typeof replaceWith === 'object', 'Must replaceWith an object or a string');\n          invariant(params == null, 'Params must not be provided to .replace() when specifying an object');\n          invariant(action == null, 'Child action must not be provided to .replace() when specifying an object');\n          invariant(newKey == null, 'Child action must not be provided to .replace() when specifying an object');\n          return StackActions.replace(replaceWith);\n        },\n        reset: function reset(actions, index) {\n          return StackActions.reset({\n            actions: actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey\n          });\n        },\n        dismiss: function dismiss() {\n          return NavigationActions.back({\n            key: navStateKey\n          });\n        }\n      });\n    },\n    getStateForAction: function getStateForAction(action, state) {\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      var activeChildRoute = state.routes[state.index];\n\n      if (!isResetToRootStack(action) && action.type !== NavigationActions.NAVIGATE) {\n        var activeChildRouter = childRouters[activeChildRoute.routeName];\n\n        if (activeChildRouter) {\n          var route = activeChildRouter.getStateForAction(action, activeChildRoute);\n\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(state, activeChildRoute.key, route, action.type === NavigationActions.SET_PARAMS);\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        for (var _iterator = _createForOfIteratorHelperLoose(state.routes.slice().reverse()), _step; !(_step = _iterator()).done;) {\n          var childRoute = _step.value;\n          var childRouter = childRouters[childRoute.routeName];\n          var childAction = action.routeName === childRoute.routeName && action.action ? action.action : action;\n\n          if (childRouter) {\n            var nextRouteState = childRouter.getStateForAction(childAction, childRoute);\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              var newState = StateUtils.replaceAndPrune(state, nextRouteState ? nextRouteState.key : childRoute.key, nextRouteState ? nextRouteState : childRoute);\n              return _objectSpread(_objectSpread({}, newState), {}, {\n                isTransitioning: state.index !== newState.index ? action.immediate !== true : state.isTransitioning\n              });\n            }\n          }\n        }\n      }\n\n      if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined) {\n        var _childRouter = childRouters[action.routeName];\n\n        var _route;\n\n        invariant(action.type !== StackActions.PUSH || action.key == null, 'StackRouter does not support key on the push action');\n        var lastRouteIndex = state.routes.findIndex(function (r) {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          var routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          if (action.params) {\n            var _route2 = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = _objectSpread(_objectSpread({}, _route2), {}, {\n              params: _objectSpread(_objectSpread({}, _route2.params), action.params)\n            });\n          }\n\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : state.isTransitioning,\n            index: lastRouteIndex,\n            routes: routes\n          });\n        }\n\n        if (_childRouter) {\n          var _childAction = action.action || NavigationActions.init({\n            params: action.params\n          });\n\n          _route = _objectSpread(_objectSpread({\n            params: action.params\n          }, _childRouter.getStateForAction(_childAction)), {}, {\n            routeName: action.routeName,\n            key: action.key || generateKey()\n          });\n        } else {\n          _route = {\n            params: action.params,\n            routeName: action.routeName,\n            key: action.key || generateKey()\n          };\n        }\n\n        return _objectSpread(_objectSpread({}, StateUtils.push(state, _route)), {}, {\n          isTransitioning: action.immediate !== true\n        });\n      } else if (action.type === StackActions.PUSH && childRouters[action.routeName] === undefined) {\n        return state;\n      }\n\n      if (behavesLikePushAction(action)) {\n        var childRouterNames = Object.keys(childRouters);\n\n        for (var i = 0; i < childRouterNames.length; i++) {\n          var childRouterName = childRouterNames[i];\n          var _childRouter2 = childRouters[childRouterName];\n\n          if (_childRouter2) {\n            var initChildRoute = _childRouter2.getStateForAction(NavigationActions.init());\n\n            var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);\n\n            var routeToPush = null;\n\n            if (navigatedChildRoute === null) {\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              routeToPush = navigatedChildRoute;\n            }\n\n            if (routeToPush) {\n              var _route3 = _objectSpread(_objectSpread({}, routeToPush), {}, {\n                routeName: childRouterName,\n                key: action.key || generateKey()\n              });\n\n              return _objectSpread(_objectSpread({}, StateUtils.push(state, _route3)), {}, {\n                isTransitioning: action.immediate !== true\n              });\n            }\n          }\n        }\n      }\n\n      if (action.type === StackActions.POP_TO_TOP) {\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        if (state.index > 0) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]]\n          });\n        }\n\n        return state;\n      }\n\n      if (action.type === StackActions.REPLACE) {\n        var routeIndex;\n\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(function (r) {\n            return r.key === action.key;\n          });\n        }\n\n        if (routeIndex !== -1) {\n          var _childRouter3 = childRouters[action.routeName];\n          var childState = {};\n\n          if (_childRouter3) {\n            var _childAction2 = action.action || NavigationActions.init({\n              params: action.params\n            });\n\n            childState = _childRouter3.getStateForAction(_childAction2);\n          }\n\n          var _routes = _toConsumableArray(state.routes);\n\n          _routes[routeIndex] = _objectSpread(_objectSpread({\n            params: action.params\n          }, childState), {}, {\n            routeName: action.routeName,\n            key: action.newKey || generateKey()\n          });\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: _routes\n          });\n        }\n      }\n\n      if (action.type === StackActions.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && state.isTransitioning) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isTransitioning: false\n        });\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n\n        if (lastRoute) {\n          var params = _objectSpread(_objectSpread({}, lastRoute.params), action.params);\n\n          var _routes2 = _toConsumableArray(state.routes);\n\n          _routes2[state.routes.indexOf(lastRoute)] = _objectSpread(_objectSpread({}, lastRoute), {}, {\n            params: params\n          });\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: _routes2\n          });\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        if (action.key != null && action.key != state.key) {\n          return state;\n        }\n\n        var newStackActions = action.actions;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          routes: newStackActions.map(function (newStackAction) {\n            var router = childRouters[newStackAction.routeName];\n            var childState = {};\n\n            if (router) {\n              var _childAction3 = newStackAction.action || NavigationActions.init({\n                params: newStackAction.params\n              });\n\n              childState = router.getStateForAction(_childAction3);\n            }\n\n            return _objectSpread(_objectSpread({\n              params: newStackAction.params\n            }, childState), {}, {\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey()\n            });\n          }),\n          index: action.index\n        });\n      }\n\n      if (action.type === NavigationActions.BACK || action.type === StackActions.POP) {\n        var _key = action.key,\n            n = action.n,\n            immediate = action.immediate;\n        var backRouteIndex = state.index;\n\n        if (action.type === StackActions.POP && n != null) {\n          backRouteIndex = Math.max(1, state.index - n + 1);\n        } else if (_key) {\n          var backRoute = state.routes.find(function (route) {\n            return route.key === _key;\n          });\n          backRouteIndex = state.routes.indexOf(backRoute);\n        }\n\n        if (backRouteIndex > 0) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: state.routes.slice(0, backRouteIndex),\n            index: backRouteIndex - 1,\n            isTransitioning: immediate !== true\n          });\n        }\n      }\n\n      var keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(state.routes.slice().reverse()), _step2; !(_step2 = _iterator2()).done;) {\n        var _childRoute = _step2.value;\n\n        if (_childRoute.key === activeChildRoute.key) {\n          continue;\n        }\n\n        if (keyIndex >= 0 && _childRoute.key !== action.key) {\n          continue;\n        }\n\n        var _childRouter4 = childRouters[_childRoute.routeName];\n\n        if (_childRouter4) {\n          var _route4 = _childRouter4.getStateForAction(action, _childRoute);\n\n          if (_route4 === null) {\n            return state;\n          } else if (_route4 && _route4 !== _childRoute) {\n            return StateUtils.replaceAt(state, _childRoute.key, _route4, action.type === NavigationActions.SET_PARAMS || action.type === StackActions.COMPLETE_TRANSITION);\n          }\n        }\n      }\n\n      return state;\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, stackConfig.navigationOptions)\n  };\n});","map":{"version":3,"sources":["C:/Users/Dell/OneDrive - University of Johannesburg/Documents/GitHub/saoso/node_modules/react-navigation/src/routers/StackRouter.js"],"names":["NavigationActions","StackActions","createConfigGetter","getScreenForRouteName","StateUtils","validateRouteConfigMap","invariant","generateKey","createPathParser","behavesLikePushAction","action","type","NAVIGATE","PUSH","defaultActionCreators","route","navStateKey","isResetToRootStack","RESET","key","routeConfigs","stackConfig","childRouters","routeNames","Object","keys","forEach","routeName","screen","router","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","getInitialState","childRouter","undefined","childState","childAction","init","params","getStateForAction","isTransitioning","index","routes","navigate","initialRouteKey","getPathAndParamsForRoute","getActionForPathAndParams","getComponentForState","state","activeChildRoute","getComponentForRouteName","getActionCreators","pop","n","popToTop","push","replace","replaceWith","newKey","reset","actions","length","dismiss","back","activeChildRouter","replaceAt","SET_PARAMS","slice","reverse","childRoute","nextRouteState","newState","replaceAndPrune","immediate","lastRouteIndex","findIndex","r","childRouterNames","i","childRouterName","initChildRoute","navigatedChildRoute","routeToPush","POP_TO_TOP","REPLACE","routeIndex","COMPLETE_TRANSITION","lastRoute","find","indexOf","newStackActions","map","newStackAction","BACK","POP","backRouteIndex","Math","max","backRoute","keyIndex","getPathAndParamsForState","path","getScreenOptions","navigationOptions"],"mappings":"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","sourcesContent":["import NavigationActions from '../NavigationActions';\nimport StackActions from './StackActions';\nimport createConfigGetter from './createConfigGetter';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport StateUtils from '../StateUtils';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport invariant from '../utils/invariant';\nimport { generateKey } from './KeyGenerator';\nimport { createPathParser } from './pathUtils';\n\nfunction behavesLikePushAction(action) {\n  return (\n    action.type === NavigationActions.NAVIGATE ||\n    action.type === StackActions.PUSH\n  );\n}\n\nconst defaultActionCreators = (route, navStateKey) => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const childRouters = {};\n  const routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach(routeName => {\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  const { initialRouteParams } = stackConfig;\n  const getCustomActionCreators =\n    stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  const initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    let route = {};\n    const childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      let childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        const childAction =\n          action.action || NavigationActions.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [\n          {\n            params: action.params,\n            ...childState,\n            key: action.key || generateKey(),\n            routeName: action.routeName,\n          },\n        ],\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(\n        NavigationActions.navigate({\n          routeName: initialRouteName,\n          params: initialRouteParams,\n        })\n      );\n    }\n    const params = (route.params || action.params || initialRouteParams) && {\n      ...(route.params || {}),\n      ...(action.params || {}),\n      ...(initialRouteParams || {}),\n    };\n    const { initialRouteKey } = stackConfig;\n    route = {\n      ...route,\n      ...(params ? { params } : {}),\n      routeName: initialRouteName,\n      key: action.key || (initialRouteKey || generateKey()),\n    };\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route],\n    };\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, stackConfig);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      const activeChildRoute = state.routes[state.index];\n      const { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return {\n        ...getCustomActionCreators(route, navStateKey),\n        pop: (n, params) =>\n          StackActions.pop({\n            n,\n            ...params,\n          }),\n        popToTop: params => StackActions.popToTop(params),\n        push: (routeName, params, action) =>\n          StackActions.push({\n            routeName,\n            params,\n            action,\n          }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey,\n            });\n          }\n          invariant(\n            typeof replaceWith === 'object',\n            'Must replaceWith an object or a string'\n          );\n          invariant(\n            params == null,\n            'Params must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            action == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            newKey == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          return StackActions.replace(replaceWith);\n        },\n        reset: (actions, index) =>\n          StackActions.reset({\n            actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey,\n          }),\n        dismiss: () =>\n          NavigationActions.back({\n            key: navStateKey,\n          }),\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      const activeChildRoute = state.routes[state.index];\n\n      if (\n        !isResetToRootStack(action) &&\n        action.type !== NavigationActions.NAVIGATE\n      ) {\n        // Let the active child router handle the action\n        const activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          const route = activeChildRouter.getStateForAction(\n            action,\n            activeChildRoute\n          );\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(\n              state,\n              activeChildRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS\n            );\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n        for (let childRoute of state.routes.slice().reverse()) {\n          let childRouter = childRouters[childRoute.routeName];\n          let childAction =\n            action.routeName === childRoute.routeName && action.action\n              ? action.action\n              : action;\n\n          if (childRouter) {\n            const nextRouteState = childRouter.getStateForAction(\n              childAction,\n              childRoute\n            );\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              const newState = StateUtils.replaceAndPrune(\n                state,\n                nextRouteState ? nextRouteState.key : childRoute.key,\n                nextRouteState ? nextRouteState : childRoute\n              );\n              return {\n                ...newState,\n                isTransitioning:\n                  state.index !== newState.index\n                    ? action.immediate !== true\n                    : state.isTransitioning,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle explicit push navigation action. This must happen after the\n      // focused child router has had a chance to handle the action.\n      if (\n        behavesLikePushAction(action) &&\n        childRouters[action.routeName] !== undefined\n      ) {\n        const childRouter = childRouters[action.routeName];\n        let route;\n\n        invariant(\n          action.type !== StackActions.PUSH || action.key == null,\n          'StackRouter does not support key on the push action'\n        );\n\n        // Before pushing a new route we first try to find one in the existing route stack\n        // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n        const lastRouteIndex = state.routes.findIndex(r => {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          // If index is unchanged and params are not being set, leave state identity intact\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          // Remove the now unused routes at the tail of the routes array\n          const routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          // Apply params if provided, otherwise leave route identity intact\n          if (action.params) {\n            const route = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = {\n              ...route,\n              params: {\n                ...route.params,\n                ...action.params,\n              },\n            };\n          }\n          // Return state with new index. Change isTransitioning only if index has changed\n          return {\n            ...state,\n            isTransitioning:\n              state.index !== lastRouteIndex\n                ? action.immediate !== true\n                : state.isTransitioning,\n            index: lastRouteIndex,\n            routes,\n          };\n        }\n\n        if (childRouter) {\n          const childAction =\n            action.action || NavigationActions.init({ params: action.params });\n          route = {\n            params: action.params,\n            // merge the child state in this order to allow params override\n            ...childRouter.getStateForAction(childAction),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        } else {\n          route = {\n            params: action.params,\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        }\n        return {\n          ...StateUtils.push(state, route),\n          isTransitioning: action.immediate !== true,\n        };\n      } else if (\n        action.type === StackActions.PUSH &&\n        childRouters[action.routeName] === undefined\n      ) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        const childRouterNames = Object.keys(childRouters);\n        for (let i = 0; i < childRouterNames.length; i++) {\n          const childRouterName = childRouterNames[i];\n          const childRouter = childRouters[childRouterName];\n          if (childRouter) {\n            // For each child router, start with a blank state\n            const initChildRoute = childRouter.getStateForAction(\n              NavigationActions.init()\n            );\n            // Then check to see if the router handles our navigate action\n            const navigatedChildRoute = childRouter.getStateForAction(\n              action,\n              initChildRoute\n            );\n            let routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              const route = {\n                ...routeToPush,\n                routeName: childRouterName,\n                key: action.key || generateKey(),\n              };\n              return {\n                ...StateUtils.push(state, route),\n                isTransitioning: action.immediate !== true,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === StackActions.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return {\n            ...state,\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]],\n          };\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === StackActions.REPLACE) {\n        let routeIndex;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(r => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          const childRouter = childRouters[action.routeName];\n          let childState = {};\n          if (childRouter) {\n            const childAction =\n              action.action ||\n              NavigationActions.init({ params: action.params });\n            childState = childRouter.getStateForAction(childAction);\n          }\n          const routes = [...state.routes];\n          routes[routeIndex] = {\n            params: action.params,\n            // merge the child state in this order to allow params override\n            ...childState,\n            routeName: action.routeName,\n            key: action.newKey || generateKey(),\n          };\n          return { ...state, routes };\n        }\n      }\n\n      // Update transitioning state\n      if (\n        action.type === StackActions.COMPLETE_TRANSITION &&\n        (action.key == null || action.key === state.key) &&\n        state.isTransitioning\n      ) {\n        return {\n          ...state,\n          isTransitioning: false,\n        };\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return {\n            ...state,\n            routes,\n          };\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key != state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        const newStackActions = action.actions;\n\n        return {\n          ...state,\n          routes: newStackActions.map(newStackAction => {\n            const router = childRouters[newStackAction.routeName];\n\n            let childState = {};\n\n            if (router) {\n              const childAction =\n                newStackAction.action ||\n                NavigationActions.init({ params: newStackAction.params });\n\n              childState = router.getStateForAction(childAction);\n            }\n\n            return {\n              params: newStackAction.params,\n              ...childState,\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey(),\n            };\n          }),\n          index: action.index,\n        };\n      }\n\n      if (\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP\n      ) {\n        const { key, n, immediate } = action;\n        let backRouteIndex = state.index;\n        if (action.type === StackActions.POP && n != null) {\n          // determine the index to go back *from*. In this case, n=1 means to go\n          // back from state.index, as if it were a normal \"BACK\" action\n          backRouteIndex = Math.max(1, state.index - n + 1);\n        } else if (key) {\n          const backRoute = state.routes.find(route => route.key === key);\n          backRouteIndex = state.routes.indexOf(backRoute);\n        }\n\n        if (backRouteIndex > 0) {\n          return {\n            ...state,\n            routes: state.routes.slice(0, backRouteIndex),\n            index: backRouteIndex - 1,\n            isTransitioning: immediate !== true,\n          };\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      const keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (let childRoute of state.routes.slice().reverse()) {\n        if (childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && childRoute.key !== action.key) {\n          continue;\n        }\n        let childRouter = childRouters[childRoute.routeName];\n        if (childRouter) {\n          const route = childRouter.getStateForAction(action, childRoute);\n\n          if (route === null) {\n            return state;\n          } else if (route && route !== childRoute) {\n            return StateUtils.replaceAt(\n              state,\n              childRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action or complete transition action,\n              // because people don't expect these actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS ||\n                action.type === StackActions.COMPLETE_TRANSITION\n            );\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      stackConfig.navigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}